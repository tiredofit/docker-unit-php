#!/command/with-contenv bash

_unit_php_bootstrap() {
    os=$(cat /etc/os-release |grep ^ID= | cut -d = -f2)
    case ${os} in
        "alpine" )
            case "${PHP_BASE}" in
                8.1 )
                    php_prefix="/etc/php81/"
                ;;
                8.2 )
                    php_prefix="/etc/php82/"
                ;;
                * )
                    php_prefix="/etc/php$(php -v 2>/dev/null | grep "^PHP " | head -n 1 | awk '{print $2}' | cut -c 1)/"
                ;;
            esac
        ;;
        "debian" )
            php_prefix="/etc/php/$(php -v 2>/dev/null | grep "^PHP " | head -n 1 | awk '{print $2}' | cut -c 1-3)/"
        ;;
    esac
}

_unit_php_configure_extensions() {
    if var_true "${PHP_ENABLE_XDEBUG}" ; then
        if [ "${PHP_BASE:0:1}" = "5" ] || [ "${PHP_BASE:0:3}" = "7.0" ] || [ "${PHP_BASE:0:3}" = "7.1" ] ; then
            cat <<EOF >> "${php_prefix}"mods-available/xdebug.ini
  zend_extension=xdebug.so
  xdebug.default_enable = 1
  xdebug.profiler_enable= ${PHP_XDEBUG_PROFILER_ENABLE}
  xdebug.profiler_enable_trigger= ${PHP_XDEBUG_PROFILER_ENABLE_TRIGGER}
  xdebug.profiler_output_dir='${PHP_XDEBUG_PROFILER_DIR}'
  xdebug.remote_autostart = ${PHP_XDEBUG_REMOTE_AUTOSTART}
  xdebug.remote_connect_back = ${PHP_XDEBUG_REMOTE_CONNECT_BACK}
  xdebug.remote_enable = ${PHP_XDEBUG_REMOTE_ENABLE}
  xdebug.remote_handler = ${PHP_XDEBUG_REMOTE_HANDLER}
  xdebug.remote_host = ${PHP_XDEBUG_REMOTE_HOST}
  xdebug.remote_port = ${PHP_XDEBUG_REMOTE_PORT}
EOF
    	else
	    	cat <<EOF >> "${php_prefix}"mods-available/xdebug.ini
  zend_extension=xdebug.so
  xdebug.default_enable = 1
  xdebug.output_dir = ${PHP_XDEBUG_OUTPUT_DIR}
  xdebug.mode = ${PHP_XDEBUG_MODE}
  xdebug.start_with_request = ${PHP_XDEBUG_START_WITH_REQUEST}
  xdebug.discover_client_host = ${PHP_XDEBUG_DISCOVER_CLIENT_HOST}
  xdebug.client_host = ${PHP_XDEBUG_CLIENT_HOST}
  xdebug.client_port = ${PHP_XDEBUG_CLIENT_PORT}
EOF
    	fi
        PHP_LOG_LEVEL=debug
        print_notice "DEBUGGING MODE ACTIVATED: Please use your IDE to connect to: ${PHP_XDEBUG_REMOTE_HOST}:${PHP_XDEBUG_REMOTE_PORT}"
        if [ "${PHP_XDEBUG_PROFILER_ENABLE}" = "1" ] || [ "${PHP_XDEBUG_MODE}" = "trace" ]; then
            print_notice "PROFILING MODE ACTIVATED: Please find the profiler logs at: ${PHP_XDEBUG_PROFILER_DIR}"
            mkdir -p "$PHP_XDEBUG_PROFILER_DIR"
            chown -R "${UNIT_USER}":"${UNIT_GROUP}" "${PHP_XDEBUG_PROFILER_DIR}"
        fi
    fi

    case ${os} in
      "alpine" )
          if var_true "${ENABLE_SMTP}" || var_true "${CONTAINER_ENABLE_MESSAGING}" ; then
            echo 'sendmail_path="/usr/bin/msmtp -C /etc/msmtprc -t "' > "${php_prefix}"/conf.d/99-smtp.ini
          fi
          echo "date.timezone=$(cat /etc/timezone)" > "${php_prefix}"/conf.d/99-timezone.ini
          ;;
      "debian" )
          if var_true "${ENABLE_SMTP}" || var_true "${CONTAINER_ENABLE_MESSAGING}" ; then
            echo 'sendmail_path="/usr/bin/msmtp -C /etc/msmtprc -t "' > "${php_prefix}"cli/conf.d/99-smtp.ini
          fi
          echo "date.timezone=$(cat /etc/timezone)" > "${php_prefix}"cli/conf.d/99-timezone.ini
          ;;
    esac

    if var_true "${CONTAINER_ENABLE_MESSAGING}" ; then
        chown "${UNIT_USER}":"${UNIT_GROUP}" /etc/msmtprc
        chmod 0600 /etc/msmtprc
    fi

    if [ "${PHP_APC_SHM_SIZE}" = "0" ]; then
        sed -i -e "s/apc.enabled=1/apc.enabled=0/g" /assets/php/mods-available/acpu.ini
    fi

    if [ "${PHP_OPCACHE_MEM_SIZE}" = "0" ] || var_false "${PHP_ENABLE_OPCACHE}" ; then
        sed -i \
                    -e "s/opcache.enable=1/opcache.enable=0/g" \
                    -e "s/opcache.enable_cli=1/opcache.enable_cli=0/g" \
                /assets/php/mods-available/opcache.ini
    else
        if var_true "${CONTAINER_ENABLE_MONITORING}" && [ "${CONTAINER_MONITORING_BACKEND,,}" = "zabbix" ]; then
            source /assets/defaults/03-monitoring
            cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/tiredofit-php_opcache.conf
  # Zabbix PHP Opcache Configuration - Automatically Generated
  # Find Companion Zabbix Server Templates at https://github.com/tiredofit/docker-unit-php
  # Autoregister=opcache

  UserParameter=php.opcache.get_status,sudo -Eu zabbix php /etc/zabbix/zabbix_agentd.conf.d/scripts/php/opcache-status.php
  UserParameter=php.opcache.get_settings,sudo -Eu zabbix php /etc/zabbix/zabbix_agentd.conf.d/scripts/php/opcache-settings.php
EOF
        fi
    fi
}

_unit_php_configure_server() {
    if [ "${PHP_BASE:0:1}" = "5" ] ; then echo "suhosin.executor.include.whitelist = phar" >> /etc/php"${PHP_BASE:0:1}"/php.ini ; fi
    truefalse_onoff PHP_DISPLAY_ERRORS

    update_template /etc/nginx/snippets/php-fpm.conf PHP_TIMEOUT

    sed -i \
                -e "s#apc.shm_size=.*#apc.shm_size=${PHP_APC_SHM_SIZE}#g" \
                -e "s#apc.ttl=.*#apc.ttl=${PHP_APC_TTL}#g" \
            /assets/php//mods-available/apcu.ini

    sed -i \
                -e "s#opcache.interned_strings_buffer=.*#opcache.interned_strings_buffer=${PHP_OPCACHE_INTERNED_STRINGS_BUFFER}#g" \
                -e "s#opcache.max_accelerated_files=.*#opcache.max_accelerated_files=${PHP_OPCACHE_MAX_ACCELERATED_FILES}#g" \
                -e "s#opcache.max_file_size=.*#opcache.max_file_size=${PHP_OPCACHE_MAX_FILE_SIZE}#g" \
                -e "s#opcache.max_wasted_percentage=.*#opcache.max_wasted_percentage=${PHP_OPCACHE_MAX_WASTED_PERCENTAGE}#g" \
                -e "s#opcache.memory_consumption=.*#opcache.memory_consumption=${PHP_OPCACHE_MEM_SIZE}#g" \
                -e "s#opcache.optimization_level=.*#opcache.optimization_level=${PHP_OPCACHE_OPTIMIZATION_LEVEL}#g" \
                -e "s#opcache.revalidate_freq=.*#opcache.revalidate_freq=${PHP_OPCACHE_REVALIDATE_FREQ}#g" \
                -e "s#opcache.revalidate_freq=.*#opcache.revalidate_freq=${PHP_OPCACHE_REVALIDATE_FREQ}#g" \
                -e "s#opcache.save_comments=.*#opcache.save_comments=${PHP_OPCACHE_SAVE_COMMENTS}#g" \
                -e "s#opcache.validate_timestamps=.*#opcache.validate_timestamps=${PHP_OPCACHE_VALIDATE_TIMESTAMPS}#g" \
           /assets/php/mods-available/opcache.ini

    if [ "${PHP_BASE:0:1}" = "7" ] ; then
        sed -i "/opcache.jit/d" /assets/php/mods-available/opcache.ini
    else
        sed -i \
                    -e "s#opcache.jit_buffer_size=.*#opcache.jit_buffer_size=${PHP_OPCACHE_JIT_BUFFER_SIZE}#g" \
                    -e "s#opcache.jit=.*#opcache.jit=${PHP_OPCACHE_JIT_MODE}#g" \
                /assets/php/mods-available/opcache.ini
    fi

    sed -i \
                -e "s#memory_limit = .*#memory_limit = ${PHP_MEMORY_LIMIT}#g" \
                -e "s#max_execution_time = .*#max_execution_time = ${PHP_TIMEOUT}#g" \
                -e "s#max_input_time = .*#max_input_time = ${PHP_TIMEOUT}#g" \
                -e "s#default_socket_timeout = .*#default_socket_timeout = ${PHP_TIMEOUT}#g" \
                -e "s#post_max_size = .*#post_max_size = ${PHP_UPLOAD_MAX_SIZE}#g" \
                -e "s#upload_max_filesize = .*#upload_max_filesize = ${PHP_UPLOAD_MAX_SIZE}#g" \
           /assets/php/cli/php.ini

        sed -i -e "s#date.timezone = .*#date.timezone = $(cat /etc/timezone)#g" /assets/php/cli/php.ini
}

_unit_php_create_default_page() {
    if var_true "${PHP_ENABLE_CREATE_SAMPLE_PHP}" ; then
        if [ ! -f "${UNIT_WEBROOT}"/index.php ] ; then
            print_notice "Creating sample index.php"
            mkdir -p "${UNIT_WEBROOT}"
            cat <<EOF > "${UNIT_WEBROOT}"/index.php
    <html>
    <title>Default Page</title>
    <h2>Container is working</h2>
    Congratulations! Your ${IMAGE_NAME} ${os} image is working. You are seeing this because you don't have an index.php file in your ${UNIT_WEBROOT} directory.<br />
    <?php phpinfo();?>
    </html>
EOF
        fi
    fi
}

_unit_php_configure_site_default() {
    if [ -z "${UNIT_SITE_ENABLED}" ] && [ ! -f "/etc/unit/sites.available/default.json" ] && [ -f "/etc/cont-init.d/20-unit-php" ]; then
        yq -nP  '
                    .listeners."'$(echo "${UNIT_LISTEN_IP}:${UNIT_LISTEN_PORT}")'".pass="applications/php" |
                    .applications.php.type = "php" |
                    .applications.php.root = "'$(echo "${UNIT_WEBROOT}")'"
                ' -o json > /etc/unit/sites.available/default.json
        sleep 1.0
    fi
}

_unit_php_post_init() {
    case ${os} in
        "alpine" )
            cp -R /assets/php/cli/php.ini "${php_prefix}"/
            cp -R /assets/php/mods-available/* "${php_prefix}"/mods-available/
        ;;
        "debian" )
            cp -R /assets/php/* "${php_prefix}"
        ;;
    esac

    case ${os} in
        "alpine" )
            ### Weird Opcache issue
            if [ -f "${php_prefix}/conf.d/10-opcache.ini" ] && [ -f "${php_prefix}/conf.d/00-opcache.ini" ] ; then
              rm -rf "${php_prefix}"/conf.d/00-opcache.ini
            fi
        ;;
    esac

    if var_false "${PHP_KITCHENSINK}" ; then
        php_enable_create_sample_php=${PHP_ENABLE_CREATE_SAMPLE_PHP}
        unset PHP_ENABLE_CREATE_SAMPLE_PHP # legacy
        php_env_plugins_enabled=$(set -o posix; set | sort | grep PHP_ENABLE_ | grep -i TRUE |sed -e 's/PHP_ENABLE_//g' | sed -e 's/=TRUE//g' | awk -vRS="" -vOFS=', ' '$1=$1' | tr A-Z a-z)
        for module in $(echo "${php_env_plugins_enabled}" | tr "," "\n" ) ; do
            if [ -f "${php_prefix}"/mods-available/"${module}".ini ]; then
                print_debug "Enabling ${module}"
                silent php-ext enable "${module}"
                php_actual_plugins_enabled="${php_actual_plugins_enabled} ${module}"
            else
                print_error "Requested enabling ${module} however it doesn't exist!"
            fi
        done
        print_debug "PHP extensions enabled: ${php_actual_plugins_enabled}"
    else
        php_enable_create_sample_php=${PHP_ENABLE_CREATE_SAMPLE_PHP}
        print_warn "Enabling Kitchen Sink mode and allowing all extensions to be active"
        silent php-ext enable all
    fi

    chmod -R 0755 "${php_prefix}"
    chown -R root:"${UNIT_GROUP}" "${php_prefix}"

    if [ -n "${PHP_FPM_POST_INIT_SCRIPT}" ] ; then
        print_debug "Found Post Init Scripts"
        post_scripts=$(echo "${PHP_FPM_POST_INIT_SCRIPT}" | tr "," "\n")
        for post_script in $post_scripts; do
            if [ -f "${post_script}" ] ; then
                print_debug "Executing post init script '${post_script}'"
                chmod +x "${post_script}"
                "${post_script}"
            else
                print_error "Tried to run post script '${post_script}' but it does not exist!"
            fi
        done
    fi

    if [ -n "${PHP_FPM_POST_INIT_COMMAND}" ] ; then
        print_debug "Found Post Init Command"
        post_commands=$(echo "${PHP_FPM_POST_INIT_COMMAND}" | tr "," "\n")
        for post_command in $post_commands; do
            print_debug "Executing post init command '${post_command}'"
            "${post_command}"
        done
    fi
}
